"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[446],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>s});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),u=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return o.createElement(c.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(n),s=r,m=d["".concat(c,".").concat(s)]||d[s]||f[s]||a;return n?o.createElement(m,l(l({ref:t},p),{},{components:n})):o.createElement(m,l({ref:t},p))}));function s(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var u=2;u<a;u++)l[u]=n[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5142:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>f,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var o=n(7462),r=(n(7294),n(3905));const a={title:"Configuration",sidebar_position:2},l=void 0,i={unversionedId:"config",id:"config",title:"Configuration",description:"CPPT utilizes the YAML language for the config file instead of the typical JSON format because YAML is more readable and allows adding comments in the config file to improve your experience when dealing with them.",source:"@site/docs/config.md",sourceDirName:".",slug:"/config",permalink:"/CPPT/docs/config",draft:!1,editUrl:"https://github.com/vishalagrawal22/CPPT/tree/main/website/docs/config.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Configuration",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/CPPT/docs/intro"},next:{title:"Usage",permalink:"/CPPT/docs/category/usage"}},c={},u=[{value:"Location",id:"location",level:2},{value:"Create default config file",id:"create-default-config-file",level:2},{value:"Default config file",id:"default-config-file",level:2}],p={toc:u};function f(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"CPPT utilizes the YAML language for the config file instead of the typical JSON format because YAML is more readable and allows adding comments in the config file to improve your experience when dealing with them."),(0,r.kt)("h2",{id:"location"},"Location"),(0,r.kt)("p",null,"The config file should be located at ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.config/cppt/config.yaml"),"."),(0,r.kt)("h2",{id:"create-default-config-file"},"Create default config file"),(0,r.kt)("p",null,"The config file gets automatically created whenever you run a command. If you want to manually create a config file, type the following command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ cppt config\n")),(0,r.kt)("p",null,"If you want to override the current config file with default values use the following command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ cppt config --reset\n")),(0,r.kt)("h2",{id:"default-config-file"},"Default config file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# absolute or relative path to the folder\n# where you want the source code (folder should already exist)\n# example: ~/cp/practice (saves code to $HOME/cp/practice)\n# default: current directory\ndefault_base_folder: .\n\n# the file extension of source code file created by cppt fetch command\n# valid options: cpp, py, java\n# default: cpp\ndefault_language: cpp\n\n# programming language related settings\n\n# command represents the command used to compile or run your source code\n\n# template represents\n# absolute path to your boiler plate code for the particular language\n# the boiler plate code will be copied to the source code of that language\n# which were created by cppt (fetch or create commands)\n# example: ~/cp/templates/template.cpp\n# default: empty file\n\nlanguage:\n  cpp:\n    # do not include -o flag\n    command: g++ -std=gnu++17 -O2 -Wall -Wextra -Wshadow\n    template: null\n\n  java:\n    # do not include -cp flag\n    command: javac\n    template: null\n\n  py:\n    command: python3\n    template: null\n\n# command which you use to open your editor\n# for vscode: code\n# for sublime: subl\neditor: null\n\n# command to open editor for multiline input\n# for vscode: code --wait\n# for sublime: subl --wait\nmultiline_input_command: null\n")))}f.isMDXComponent=!0}}]);