"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={title:"Introduction",sidebar_position:1},i=void 0,l={unversionedId:"intro",id:"intro",title:"Introduction",description:"CPPT is a cross platform command line tool to automate your competitive programming workflow without cluttering your workspace with testcase data.",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/CPPT/docs/intro",draft:!1,editUrl:"https://github.com/vishalagrawal22/CPPT/tree/main/website/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Introduction",sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Configuration",permalink:"/CPPT/docs/config"}},s={},p=[{value:"Problem",id:"problem",level:2},{value:"Solution",id:"solution",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Supported Operating Systems",id:"supported-operating-systems",level:3},{value:"Supported Languages",id:"supported-languages",level:3},{value:"Requirements",id:"requirements",level:3},{value:"Installation",id:"installation",level:3},{value:"Folder structure",id:"folder-structure",level:3}],c={toc:p};function u(e){let{components:t,...o}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"CPPT is a ",(0,a.kt)("strong",{parentName:"p"},"cross platform")," command line tool to automate your competitive programming workflow ",(0,a.kt)("strong",{parentName:"p"},"without cluttering")," your workspace with testcase data."),(0,a.kt)("h2",{id:"problem"},"Problem"),(0,a.kt)("p",null,"There already ",(0,a.kt)("strong",{parentName:"p"},"exist various choices")," for command line tools in the competitive programming ecosystem like ",(0,a.kt)("a",{parentName:"p",href:"https://searleser97.github.io/cpbooster/"},"cpb")," and ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/xalanq/cf-tool"},"cf tool"),", which could help you automate various repetitive tasks and make competitive programming more efficient and fun. The problem with these tools is they follow the ",(0,a.kt)("strong",{parentName:"p"},'"Flat File Structure" philosophy')," in which your source code and testcase files are kept in the same folder to improve the speed of manipulating (creating, updating, deleting) them. This approach causes a mess making it ",(0,a.kt)("strong",{parentName:"p"},"hard to navigate")," between source code files. As changes in testcase are rare, saving a few seconds is manipulating them might not be worth it."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"cpb example",src:n(7035).Z,width:"295",height:"615"})),(0,a.kt)("h2",{id:"solution"},"Solution"),(0,a.kt)("p",null,"CPPT ",(0,a.kt)("strong",{parentName:"p"},"hides")," all the data required to test your code inside a hidden subfolder (.cppt) so that your ",(0,a.kt)("strong",{parentName:"p"},"folder remains clean")," and you can ",(0,a.kt)("strong",{parentName:"p"},"focus on writing your source code")," instead while providing you with easy-to-use and fast testcase manipulation commands."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"cppt example",src:n(743).Z,width:"295",height:"207"})),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)("h3",{id:"supported-operating-systems"},"Supported Operating Systems"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Windows (both ",(0,a.kt)("strong",{parentName:"li"},"cmd")," and ",(0,a.kt)("strong",{parentName:"li"},"wsl"),")"),(0,a.kt)("li",{parentName:"ol"},"Linux"),(0,a.kt)("li",{parentName:"ol"},"MacOS")),(0,a.kt)("h3",{id:"supported-languages"},"Supported Languages"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"C++"),(0,a.kt)("li",{parentName:"ol"},"Java"),(0,a.kt)("li",{parentName:"ol"},"Python")),(0,a.kt)("h3",{id:"requirements"},"Requirements"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Python version >= 3.6 and pip installed"),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/jmerle/competitive-companion"},"Competitive companion")," browser extension installed.")),(0,a.kt)("h3",{id:"installation"},"Installation"),(0,a.kt)("p",null,"Use the following command to install the tool"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ pip install cppt\n")),(0,a.kt)("p",null,"After the tool is installed, type the command"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ cppt\n")),(0,a.kt)("p",null,"you should see the following help text."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Usage: cppt [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  -h, --help  Show this message and exit.\n\nCommands:\n  compile  compile source code\n  config   get location of config file or reset config file\n  create   create a task\n  fetch    retrieve testcase data from online judge\n  run      run code against testcases\n  tc       commands related to testcase data\n  test     brute force testing\n")),(0,a.kt)("h3",{id:"folder-structure"},"Folder structure"),(0,a.kt)("p",null,"CPPT creates a hidden root folder (.cppt) in every directory where you use ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"fetch"))," or ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"create"))," commands to create tasks."),(0,a.kt)("p",null,"Every task you create has a dedicated subfolder that shares the same name as the task."),(0,a.kt)("p",null,"Each task folder consists of a ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"tc folder"))," and a ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"last_run folder"))," respectively."),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"tc folder"))," consists of all the input files (in{num}.txt) and all the intended output files (ans{num}.txt)."),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"last_run folder"))," consists of all files generated in the last run like the standard output files (output{num}.txt), standard error files (error{num}.txt), and compilation_error.txt which consist of the compilation error text if any."),(0,a.kt)("p",null,"You can use the ",(0,a.kt)("strong",{parentName:"p"},"standard error")," (like cerr in c++) to ",(0,a.kt)("strong",{parentName:"p"},"print debugging info"),". It will be displayed separately and will not affect the testcase verdict (only standard output needs to match the intended output to get accepted)."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Folder Structure Example",src:n(2709).Z,width:"276",height:"400"})))}u.isMDXComponent=!0},7035:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/cpb-d773efd8e59e3e0243b4c0b9c7b184a3.png"},743:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/cppt-a34faa896019e9742e379aa562d97b41.png"},2709:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/folder-structure-bd098a209389ba63533f61e0c0a5006e.png"}}]);